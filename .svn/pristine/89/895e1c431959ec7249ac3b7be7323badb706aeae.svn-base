/*
 * TCSS 305
 * Assignment 6 - Tetris
 */
package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JLabel;

/**
 * The Canvas class that hosts drawing and graphics for Power Paint.
 * 
 * @author Garrett Lahmann
 * @version 23 November 2016
 */
public class GamePanel extends JLabel implements Observer {
    /**  */
    // TODO make dimension dynamic
    // TODO retain proportion 10x20
    private static final Dimension MIN_SIZE = new Dimension(200, 400);
    
    /**  */
    private String myBoardString;
    
    /**
     * Constructs a new "Canvas" JLabel to hold graphics.
     */
    public GamePanel() {
        super();
        setBackground(Color.WHITE);
        setOpaque(true);
        setPreferredSize(MIN_SIZE);
        setMinimumSize(MIN_SIZE);
        setInits();
    }
    
    /**
     * Initialize class fields to specified start requirements.
     */
    private void setInits() {

    }
    
    /**
     * Paints shapes to the canvas.
     * 
     * @param theGraphic    the graphic.
     */
    @Override
    public void paintComponent(final Graphics theGraphic) {
        super.paintComponent(theGraphic);
        final Graphics2D g2d = (Graphics2D) theGraphic;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                               RenderingHints.VALUE_ANTIALIAS_ON);
        drawRectangle(Color.BLACK); // TODO make color dynamic
        
        
        
    }
    
//    /**
//     * Clears panel of all previous shapes.
//     */
//    public final void clear() {
//        
//        repaint();
//    }
    
    /**
     * TODO Should this be private?
     */
    private void drawGrid() {
        
    }
    
    /**
     * 
     */
    private void drawRectangle(final Color theColor) {
        
    }
    
//    /**
//     * Resets the start and end point fields to null.
//     */
//    public void resetPoints() { 
//        myStartPoint = NO_POINT;
//        myEndPoint = NO_POINT; 
//    }
    
    /**
     * Returns the minimum size of this canvas.
     * 
     * @return  The minimum canvas dimensions.
     */
    @Override
    public Dimension getMinimumSize() {
        return MIN_SIZE;
    }
    
    /**
     * Returns the preferred size of this canvas.
     * 
     * @return  The preferred canvas dimensions.
     */
    @Override
    public Dimension getPreferredSize() {
        return MIN_SIZE;
    }

    /**
     * 
     */
    @Override
    public void update(Observable theObservable, Object theObject) {
        // TODO Auto-generated method stub
        if (theObject instanceof String) {
            myBoardString = (String) theObject;
            repaint();
        }
    }
    
    
    // Setters

    
//    /**
//     * Sets the current fill and line colors for the canvas.
//     * 
//     * @param theLineColor  the selected line color.
//     * @param theFillColor  the selected fill color.
//     */
//    public void setColor(final Color theLineColor, final Color theFillColor) {
//        myLineColor = theLineColor;
//        myFillColor = theFillColor;
//    }
    
//    /**
//     * Sets the line thickness.
//     * 
//     * @param theThickness the selected line thickness.
//     */
//    public void setThickness(final int theThickness) {
//        myThickness = theThickness;
//    }
       
}