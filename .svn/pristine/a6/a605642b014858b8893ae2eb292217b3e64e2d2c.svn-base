/*
 * TCSS 305
 * Assignment 6 - Tetris
 */
package view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JSlider;

/**
 * Creates a menu bar for use on a Tetris GUI.
 * 
 * @author Garrett Lahmann
 * @version 2 December 2016
 */
public final class TetrisMenuBar extends JMenuBar {

    /** Auto-generated serial version user ID. */
    private static final long serialVersionUID = 6953223849934404758L;
    
    /** Major tick spacing for slider. */
    private static final int MAJOR_TICK = 10;
    
    /** Minor tick spacing for slider. */
    private static final int MINOR_TICK = 5;
    
    /** A key binder panel. */
    private final KeyPanel myKeyPanel;
    
    /**
     * Constructor for Tetris menu bar.
     * 
     * @param theKeyPanel   a key panel.
     * @param theWidthSlider    a JSlider for width.
     * @param theHeightSlider   a JSlider for height.
     * @param theStartButton    a start game menu item.
     * @param theEndButton      an end game menu item.
     */
    public TetrisMenuBar(final KeyPanel theKeyPanel, final JSlider theWidthSlider, 
                         final JSlider theHeightSlider, final JMenuItem theStartButton,
                         final JMenuItem theEndButton) {
        super();
        myKeyPanel = theKeyPanel;

        final JMenu fileMenu = buildFileMenu(theStartButton, theEndButton);
        final JMenu optionMenu = buildOptionMenu(theWidthSlider, theHeightSlider);
        final JMenu helpMenu = buildHelpMenu();
        
        add(fileMenu);
        add(optionMenu);
        add(helpMenu);
    }
    
    /**
     * 
     * @param theStartButton    a start game menu item.
     * @param theEndButton      an end game menu item.
     * @return a complete file menu.
     */
    private JMenu buildFileMenu(final JMenuItem theStartButton,
                                final JMenuItem theEndButton) {
        final JMenu menu = new JMenu("File");
        
        menu.add(theStartButton);
        menu.add(theEndButton);
        return menu;
    }

    /**
     * Builds an option menu.
     * 
     * @param theWidthSlider    a JSlider for width.
     * @param theHeightSlider   a JSlider for height.
     * @return a complete options menu.
     */
    private JMenu buildOptionMenu(final JSlider theWidthSlider, 
                                  final JSlider theHeightSlider) {
        final JMenu menu = new JMenu("Options");
        menu.setLayout(new BoxLayout(menu, BoxLayout.PAGE_AXIS));
        final JMenuItem controls = buildControlItem();
        final JMenu boardSize = new JMenu("Size"); 
        
        final JLabel widthLabel = new JLabel("Width", JLabel.CENTER);
        widthLabel.setAlignmentX(CENTER_ALIGNMENT);
        final JLabel heightLabel = new JLabel("Height", JLabel.CENTER);
        heightLabel.setAlignmentX(CENTER_ALIGNMENT);
        
        theWidthSlider.setMajorTickSpacing(MAJOR_TICK);
        theWidthSlider.setMinorTickSpacing(MINOR_TICK);
        theWidthSlider.setPaintTicks(true);
        theWidthSlider.setPaintLabels(true);
        
        theHeightSlider.setMajorTickSpacing(MAJOR_TICK);
        theHeightSlider.setMinorTickSpacing(MINOR_TICK);
        theHeightSlider.setPaintTicks(true);
        theHeightSlider.setPaintLabels(true);
        
        boardSize.add(widthLabel);
        boardSize.add(theWidthSlider);
        boardSize.add(heightLabel);
        boardSize.add(theHeightSlider);
        
        menu.add(controls);
        menu.add(boardSize);
        return menu;
    }
    
    /**
     * Builds a help menu.
     * 
     * @return a complete help menu.
     */
    private JMenu buildHelpMenu() {
        final JMenu menu = new JMenu("Help");
        final JMenuItem scoring = new JMenuItem("Scoring...");
        
        menu.add(scoring);
        return menu;
    }
    
    /**
     * Builds control menu item.
     * 
     * @return a menu item with action listener.
     */
    private JMenuItem buildControlItem() {
        final JMenuItem item = new JMenuItem("Controls...");
        item.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                JOptionPane.showMessageDialog(TetrisMenuBar.this, myKeyPanel, "Controls", 
                                              JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        return item;
    }
}
