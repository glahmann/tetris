/*
 * TCSS 305
 * Assignment 6 - Tetris
 */
package view;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
//import java.awt.event.ComponentAdapter;
//import java.awt.event.ComponentEvent;
import java.awt.event.MouseEvent;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.event.MouseInputAdapter;

import model.Board;

/**
 * Class that builds a Tetris GUI.
 * 
 * @author Garrett Lahmann
 * @version 2 December 2016
 */
public class TetrisGUI extends JFrame implements Observer {

    /** Auto-generated serial version user ID. */
    private static final long serialVersionUID = 6889637726788853913L;

    /** The timer delay in milliseconds. */
    private static final int TIMER_DELAY = 1000;
    
    /** The Tetris board. */
    private Board myBoard;  // TODO make modifiable
    
    /** A game panel to display the current game being played. */
    private final GamePanel myGamePanel;
    
    /** A preview panel to display the next queued tetromino. */
    private final PreviewPanel myPreviewPanel;
    
    /** A score panel to keep track of scoring information. */
    private final ScorePanel myScorePanel;
    
    /** A game timer. */
    private Timer myTimer;
    
    /** A panel to place the game panel on. */
    private final JPanel myCenterPanel;
    
    /** A boolean that tells if the mouse is on the game panel. */
    private boolean myOnPanelBool;
    
    /**
     * Constructs a new TetrisGUI.
     */
    public TetrisGUI() {
        super("TCSS 305 - Tetris");

        myBoard = new Board();
        myGamePanel = new GamePanel(myBoard.getWidth(), myBoard.getHeight());
        myPreviewPanel = new PreviewPanel(myBoard.getWidth(), myBoard.getWidth());
        myScorePanel = new ScorePanel(myBoard.getWidth(), myBoard.getWidth());
        myCenterPanel = new JPanel();
//        setComponentListener();
        setResizable(false);
        addObservers();
    }
    
    /**
     * Displays the GUI. // TODO modularize
     */
    public void start() {
        myBoard.newGame();  // Must be called before game can start
        myTimer = new Timer(TIMER_DELAY, new TimeListener());
        myTimer.start();
        
        final MouseInputAdapter mia = new MyMouseInputAdapter();
        addMouseListener(mia);
        myGamePanel.addMouseListener(mia);
        
        myCenterPanel.add(myGamePanel, BorderLayout.CENTER);
        
        add(myCenterPanel, BorderLayout.CENTER);
        
        final KeyPanel keyPanel = new KeyPanel(myBoard, myGamePanel);
        final TetrisMenuBar menuBar = new TetrisMenuBar(keyPanel);
        setJMenuBar(menuBar);
           
        final JPanel eastPanel = new JPanel();
        eastPanel.setLayout(new BoxLayout(eastPanel, BoxLayout.PAGE_AXIS));
        eastPanel.add(myPreviewPanel);
        eastPanel.add(myScorePanel);
        add(eastPanel, BorderLayout.EAST);
        
        pack();
        
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // Center on screen TODO recenter for resize?
        setVisible(true);
        
    }
    
    /**
     * Add board observers.
     */
    private void addObservers() {
        myBoard.addObserver(this);
        myBoard.addObserver(myGamePanel);
        myBoard.addObserver(myPreviewPanel);
        myBoard.addObserver(myScorePanel);
    }
    
//    /**
//     * Returns the current frame dimensions.
//     */
//    private void setComponentListener() {
//        myCenterPanel.addComponentListener(new ComponentAdapter() {
//            public void componentResized(final ComponentEvent theEvent) {
//                myGamePanel.setScale(getBounds().getSize(), myScorePanel.getWidth());
//            }
//        });
//    }

    /**
     * Observes the board class and stops timer when game is over.
     * 
     * @param theObservable
     * @param theObject
     */
    @Override
    public void update(final Observable theObservable, final Object theObject) {
        // Check for game over boolean
        if (theObject instanceof Boolean && (boolean) theObject) { 
            myTimer.stop();
        }
    }
    
    // ********** Inner Classes **********
    
    /**
     * Action listener for timer.
     * 
     * @author Garrett Lahmann
     * @version 2 December 2016
     */
    class TimeListener implements ActionListener {
        /**
         * Calls board's down method at each event.
         * 
         * @param theEvent  a timer event.
         */
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myBoard.down();     // Move piece down on every timer event
        }
    }
    
    /**
     * Mouse adapter to listen for mouse location and release events.
     * 
     * @author Garrett Lahmann
     * @version 2 December 2016
     */
    class MyMouseInputAdapter extends MouseInputAdapter {
        
        /**
         * Pauses/unpauses game when mouse released in certain areas.
         * 
         * @param theEvent  a mouse released event.
         */
        @Override
        public void mouseReleased(final MouseEvent theEvent) {
            if (myOnPanelBool) {
                myTimer.start();
                myGamePanel.setPause(false);
            } else {
                myTimer.stop();
                myGamePanel.setPause(true);
            }
        }
        
        /**
         * Notifies GUI that mouse is on game panel.
         * 
         * @param theEvent  a mouse entered event.
         */
        @Override
        public void mouseEntered(final MouseEvent theEvent) {
            if (theEvent.getComponent().equals(myGamePanel)) {
                myOnPanelBool = true;
            }
        }
        
        /**
         * Notifies GUI that mouse has left game panel.
         * 
         * @param theEvent  a mouse exited event.
         */
        @Override
        public void mouseExited(final MouseEvent theEvent) {
            if (theEvent.getComponent().equals(myGamePanel)) {
                myOnPanelBool = false;
            }
        }    
    }
}
