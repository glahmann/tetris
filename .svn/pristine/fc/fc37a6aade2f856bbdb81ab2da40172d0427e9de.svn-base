/*
 * TCSS 305
 * Assignment 6 - Tetris
 */
package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;

import javax.swing.JLabel;

/**
 * Builds a panel to display tetrominos during gameplay.
 * 
 * @author Garrett Lahmann
 * @version 2 December 2016
 */
public class GamePanel extends JLabel implements Observer {
    
    /** Auto-generated serial version user ID. */
    private static final long serialVersionUID = -7664600103187011216L;

    /** The arc radius for rounded rectangle corners. */
    private static final int ARC_RADIUS = 10;
    
    /** The scale of the board. */
    private static final int SCALE = 20;
    
    /** The number of characters to skip at beginning of board string. */
    private static final int SKIP = 59;
    
    /** The number of characters to trash per line of board string. */
    private static final int TRASH = 3;
    
    /** The number of characters in a board string line. */
    private static final int LINE_LENGTH = 13;
    
    /** A reference set of characters that represent tetriminoes. */
    private static final Set<Character> MY_SHAPES = new HashSet<Character>(Arrays.asList(
        new Character[] {'I', 'J', 'L', 'O', 'S', 'T', 'Z'}));
    
    
    /** A boolean representing whether the game is paused or not. */
    private boolean myPauseBool;
    
    /** A boolean representing whether the game is over or not. */
    private boolean myGameOverBool;
    
    /** The height of the panel. */
    private int myHeight;   
    
    /** The width of the panel. */
    private int myWidth;
    
    /**  */
    private String myBoardString;
    
    /**
     * Constructs a new "Canvas" JLabel to hold graphics.
     * 
     * @param theWidth  the board width.
     * @param theHeight the board height.
     */
    public GamePanel(final int theWidth, final int theHeight) {
        super();
        myWidth = theWidth * SCALE;
        myHeight = theHeight * SCALE;
        
        
       
        setInits();
    }
    
    /**
     * Initialize class fields to specified start requirements.
     */
    private void setInits() {
        myPauseBool = false;
        myGameOverBool = false;
        setBackground(Color.WHITE);
        setOpaque(true);
        setPreferredSize(new Dimension(myWidth, myHeight));
        setMinimumSize(new Dimension(myWidth, myHeight));
    }
    
    /**
     * Paints shapes to the canvas.
     * 
     * @param theGraphic    the graphic.
     */
    @Override
    public void paintComponent(final Graphics theGraphic) {
        super.paintComponent(theGraphic);
        final Graphics2D g2d = (Graphics2D) theGraphic;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                               RenderingHints.VALUE_ANTIALIAS_ON);
        if (myPauseBool) {
            setBackground(Color.LIGHT_GRAY);
            g2d.drawString("Pause", myWidth / 2 - SCALE, myHeight / 2); 
        } else {
            for (int i = SKIP; i < myBoardString.length(); i++) { //Start at visible index
                if (MY_SHAPES.contains(myBoardString.charAt(i))) {
                    g2d.setPaint(Color.GREEN);
                    
                    // TODO This logic might cause trouble for variable grid sizes
                    final int x = (i % LINE_LENGTH) * SCALE; 
                    final int y = ((i - SKIP - TRASH) / LINE_LENGTH) * SCALE;
                    
                    g2d.drawRoundRect(x, y, SCALE, SCALE, ARC_RADIUS, ARC_RADIUS);
                }
            }
            if (myGameOverBool) { // TODO fix alignment, maybe with JLabel?
                g2d.setPaint(Color.BLACK);
                g2d.drawString("Game Over", myWidth / 2 - SCALE, myHeight / 2); 
            }
        } 
    }
    
//    /**
//     * TODO Should this be private?
//     */
//    private void drawGrid() {
//        
//    }

    /**
     * Observes a Tetris board and updates when a new string representation of the board is 
     * received.
     * 
     * @param theObservable the observable object.
     * @param theObject     the object broadcasted by the observable object.
     */
    @Override
    public void update(final Observable theObservable, final Object theObject) {
        // TODO Auto-generated method stub
        if (theObject instanceof String) {
            myBoardString = (String) theObject;
            repaint();
        } else if (theObject instanceof Boolean) {
            myGameOverBool = true;
        }
    }
    
    // ********** Setters **********
    
    /**
     * Sets the width of the panel.
     * 
     * @param theWidth  the new panel width.
     */
    public void setWidth(final int theWidth) {
        myWidth = theWidth;
    }
    
    /**
     * Sets the height of the panel.
     * 
     * @param theHeight the new panel height.
     */
    public void setHeight(final int theHeight) {
        myHeight = theHeight;
    }
    
    /**
     * 
     * @param thePauseBool  whether or not pause is enabled.
     */
    public void setPause(final boolean thePauseBool) {
        myPauseBool = thePauseBool;
        repaint();
    }
       
}